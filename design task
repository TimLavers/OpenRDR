We are reimplementing a case-based, rule-building application with a moderately complex UI so that the user can interact with the app using an alternative mode, namely a chat window backed by an LLM, with the goal of making it easier for the user.

The application allows a user to build rules to generate a list of comments for each "case" that is presented to it. A case is a collection of attribute/value pairs, e.g. glucose = 5.5. Each rule will have an action that will be performed when the rule is triggered. The actions are:
- add a comment,
- remove a comment,
- replace a comment.

Each rule also has one or more boolean conditions referring to the case attributes, e.g. glucose > 5.0.

A rule is therefore built when a user reviews the comments given for a case (the "interpretation") and decides that a comment needs to be added, removed or replaced.

The case that triggers the building of one or more rules to fix its interpretation is called a "cornerstone" case. The application stores each cornerstone case and its associated rules.

Whenever a user starts to build a rule by defining the action, the first cornerstone case whose interpretation will also change as a result of the proposed rule is shown to the user. The user can then accept that the new interpretation of that cornerstone case is correct, or they can add one or more further conditions to their current rule so that it no longer applies to that cornerstone case, that is, conditions that will evaluate to false for that cornerstone case, but true for the case that triggered the rule building.

Once that cornerstone case is dealt with, either by accepting the change to the interpretation or by making the rule not apply to that cornerstone case, the next cornerstone case is shown to the user, and so on, until the user has dealt with all cornerstone cases that could be affected by the rule.